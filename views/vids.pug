doctype html
html
  head
    title 🐶 Bonnie
    link(rel="apple-touch-icon", sizes="180x180", href="/apple-touch-icon.png")
    link(rel="icon", type="image/png", sizes="32x32", href="/favicon-32x32.png")
    link(rel="icon", type="image/png", sizes="16x16", href="/favicon-16x16.png")
    meta(name="viewport", content="width=device-width, initial-scale=1, maximum-scale=1")
    meta(property="og:title", content="🐶 Bonnie")
    meta(property="og:description", content="Bonnie is a good girl.")
    meta(property="og:image", content="https://bonnie.dog/img/0.jpg")
    meta(property="og:url", content="https://bonnie.dog/vids")
    meta(name="twitter:card", content="summary_large_image")
    style.
      @keyframes spin {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }

      html, body {
        margin: 0;
        padding: 0;
        height: 100%;
        width: 100%;
        overflow: hidden;
      }

      body {
        background: black;
      }

      video {
        min-width: 100%;
        min-height: 100%;
        width: auto;
        height: auto;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
      }

      #spinner {
        animation: spin 1300ms linear infinite;
        border: 13px solid rgb(82, 71, 50);
        border-radius: 100%;
        border-top-color: transparent;
        border-bottom-color: transparent;
        width: 200px;
        height: 200px;
        position: fixed;
        top: 50%;
        left: 50%;
        margin-top: -100px;
        margin-left: -100px;
        box-sizing: border-box;
      }

      #dog-face {
        width: 120px;
        height: 120px;
        position: fixed;
        top: 50%;
        left: 50%;
        margin-top: -60px;
        margin-left: -60px;
      }
body
  img#dog-face(src="dog-face.svg", alt="dog")
  div#spinner
  video#vid(autoplay, muted, loop)
  script.
    const videoTag = document.getElementById('vid');
    const segments = [
    '1/360.hdr',
    '1/0.720.chk',
    '1/1.720.chk',
    '1/2.720.chk',
    '10/0.580.chk',
    '10/1.360.chk',
    '11/0.360.chk',
    '11/1.360.chk',
    '11/2.360.chk',
    '12/0.360.chk',
    '12/1.360.chk',
    ];

    async function loadSegment(url) {
      if (url) {
      const data = await fetch(`vid/${url}`)
        .then(r => r.arrayBuffer());

      videoSourceBuffer.appendBuffer(data);
      }
      else {
        mediaSource.endOfStream();
      }
    }

    const mediaSource = new MediaSource();
    const url = URL.createObjectURL(mediaSource);

    videoTag.src = url;

    let videoSourceBuffer;

    mediaSource.addEventListener('sourceopen', () => {
      videoSourceBuffer = mediaSource
        .addSourceBuffer('video/webm; codecs="vp9"');

      videoSourceBuffer.mode = 'sequence';

      loadSegment(segments.shift());

      videoSourceBuffer.addEventListener('updateend', (...args) => {
        let timeToWait = 0;
        if (videoTag.buffered.length) {
          const timeRemaining = videoTag.buffered.end(0) - videoTag.currentTime;
          console.log(timeRemaining);
          timeToWait = Math.floor(Math.max(timeRemaining - 3, 0) * 1000);
          console.log(timeToWait);
        }
        setTimeout(() => loadSegment(segments.shift()), timeToWait);
        console.log('updateend');
      });
    });